sudo: required

addons:
  chrome: stable

matrix:
  include:
  - os: linux
    language: python
    python: 2.7
    services:
    - rabbitmq
    - memcached
    - postgresql
  - os: linux
    language: python
    python: 3.5
    services:
    - rabbitmq
    - memcached
    - postgresql
  - os: osx
    language: generic
    osx_image: xcode8.3
  - os: osx
    language: generic
    osx_image: xcode7.3

# command to install dependencies
install:
  - |
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        brew update;
        brew install rabbitmq;
        brew install memcached;
        rm -rf /usr/local/var/postgres;
        initdb /usr/local/var/postgres;
        pg_ctl -D /usr/local/var/postgres start;
        sleep 5; # let database start
        createuser -s postgres;
        brew services start rabbitmq;
        brew services start memcached;
        wget https://chromedriver.storage.googleapis.com/2.36/chromedriver_mac64.zip;
        unzip chromedriver_mac64.zip;
    elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        sudo apt-get install npm
        wget https://chromedriver.storage.googleapis.com/2.36/chromedriver_linux64.zip;
        unzip chromedriver_linux64.zip;
    fi
  - export PATH=$PATH:$(pwd):/usr/local/sbin
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        virtualenv -p python2 env;
        source env/bin/activate;
        pip2 install -r requirements/requirements_py2.txt;
        pip2 install -r requirements/dev_requirements.txt;
        pip2 install coveralls;
        pip2 install codecov;
    elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        virtualenv -p python env;
        if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
            pip2 install -r requirements/requirements_py3.txt;
            pip2 install -r requirements/dev_requirements.txt;
            pip2 install coveralls;
            pip2 install codecov;
        elif [[ "$TRAVIS_PYTHON_VERSION" == "3.5" ]]; then
            pip install -r requirements/requirements_py3.txt;
            pip install -r requirements/dev_requirements.txt;
            pip install coveralls;
            pip install codecov;
        fi
    fi

before_script:
  - psql -c 'create database django;' -U postgres
  - psql -c 'create user django;' -U postgres
  - psql -c 'grant all on database django to django;' -U postgres
  - psql -c 'ALTER USER django CREATEDB;' -U postgres
  - mkdir -p ./media/blast/db/
  - npm run build
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        python manage.py migrate;
    elif [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        python manage.py migrate;
        gem install awesome_bot;
    fi
  - python manage.py collectstatic --noinput

# command to run tests
script:
  - coverage run --source= ./manage.py test blast.tests.ClickAllTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.NucleotideSequenceSimpleTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.NucleotideSequenceComplexTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.PeptideSequenceSimpleTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.PeptideSequenceComplexTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.LoadExampleNucleotideSequenceTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.LoadExamplePeptideSequenceTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.ClickSequenceTypeTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.HoverIntentTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.BlastModelActionTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.BlastAdminTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.BlastBinaryTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.ValidQueryTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.QueryWithNoHitTestCase --noinput
  - coverage run --source= ./manage.py test blast.tests.UploadFileTestCase --noinput
  - coverage run --source= ./manage.py test hmmer.tests.HmmerAdminTestCase --noinput
  - coverage run --source= ./manage.py test hmmer.tests.LoadSeqExampleTestCase --noinput
  - coverage run --source= ./manage.py test hmmer.tests.LoadAlignExampleTestCase --noinput
  - coverage run --source= ./manage.py test hmmer.tests.UploadFileTestCase --noinput
  - coverage run --source= ./manage.py test hmmer.tests.HmmerViewFunctionTestCase --noinput
  - coverage run --source= ./manage.py test hmmer.tests.HmmerBinaryTestCase --noinput
  - coverage run --source= ./manage.py test clustal.tests.ClustalLoadExampleTestCase --noinput
  - coverage run --source= ./manage.py test clustal.tests.ClustalUploadFileTestCase --noinput
  - coverage run --source= ./manage.py test clustal.tests.ClustalBinaryTestCase --noinput
  - coverage run --source= ./manage.py test filebrowser --noinput
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        cat i5k/settings.py | sed -r 's/ENABLE_JBROWSE_INTEGRATION = False/ENABLE_JBROWSE_INTEGRATION = True/g;' > i5k/settings2.py;
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        cat i5k/settings.py | sed -E 's/ENABLE_JBROWSE_INTEGRATION = False/ENABLE_JBROWSE_INTEGRATION = True/g;' > i5k/settings2.py;
    fi
  - rm i5k/settings.py
  - mv i5k/settings2.py i5k/settings.py
  - coverage run --source= ./manage.py test blast.tests.JbrowseLinkOutTestCase --noinput
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then awesome_bot --allow-redirect --allow-dupe README.md; fi

after_success:
  - coverage report  # show the coverage report
  - coveralls
  - codecov
